---
- name: Step 000 pre-software
  hosts: localhost
  gather_facts: false
  become: false
  tasks:
    - debug:
        msg: "Pre-Software tasks Started"

- name: Configure bastion with repositories
  hosts:
  - bastions
  become: true
  gather_facts: false
  tags:
  - step003
  roles:
  - role: set-repositories
    when: repo_method is defined
  - role: common
    when: install_common | bool

- name: Install Azure CLI
  hosts: bastions
  gather_facts: false
  become: true
  tasks:
    - name: Install Azure CLI
      when: install_aro | default(false) | bool
      block:
        - name: Import Azure CLI GPG key
          ansible.builtin.rpm_key:
            state: present
            key: https://packages.microsoft.com/keys/microsoft.asc

        - name: Add Azure CLI repository
          ansible.builtin.yum:
            name: https://packages.microsoft.com/config/rhel/8/packages-microsoft-prod.rpm
            state: present

        - name: Install Azure CLI package
          ansible.builtin.yum:
            name: azure-cli
            state: latest

        - name: Install git and pip
          ansible.builtin.package:
            name:
              - git
              - python3-pip
            state: latest

- name: Stash Creds For Azure CLI
  hosts: bastions
  gather_facts: false
  become: true
  become_user: "{{ remote_user }}"
  tasks:
    - name: Stash Creds For Azure CLI
      when: install_aro | default(false) | bool
      block:
        - name: Log into Azure SP and stash creds in remote user
          ansible.builtin.command: >-
            az login --service-principal -u "{{ hostvars.localhost.azappsp.service_principals[0].app_id }}"
            -p="{{ hostvars.localhost.azpass }}" --tenant="{{ azure_tenant }}"

- name: "Add Azure variables to /home/{{ remote_user }}.bashrc"
  hosts: bastions
  gather_facts: false
  become: true
  become_user: "{{ remote_user }}"
  tasks:
    - name: "Add Azure variables to /home/{{ remote_user }}.bashrc"
      when:
        - install_aro | default(false) | bool
        - aro_env_vars | default(false) | bool
      block:
        - name: "Add Azure variables to /home/{{ remote_user }}.bashrc"
          ansible.builtind.blockinfile:
            path: "/home/{{ remote_user }}/.bashrc"
            marker: "### {mark} ANSIBLE MANAGED BLOCK ###"
            block: |
              # AZURE_SUBSCRIPTION_ID=%azure_subscription_id%
              # AZURE_TENANT_ID=%azure_tenant%
              # SERVICE_PRINCIPAL_CLIENT_ID=%azappid%
              # SERVICE_PRINCIPAL_CLIENT_SECRET=%azpass%
              # REGION=eastus
              # RESOURCE_GROUP=openenv-${GUID}
              # PROJECT_NAME=ostoy-${GUID}
              # KEYVAULT_NAME=secret-store-${GUID}
              #
              export AZURE_SUBSCRIPTION_ID={{ azure_subscription_id }}
              export AZURE_TENANT_ID={{ azure_tenant }}
              export SERVICE_PRINCIPAL_CLIENT_ID={{ hostvars.localhost.azappsp.service_principals[0].app_id }}
              export SERVICE_PRINCIPAL_CLIENT_SECRET={{ hostvars.localhost.azpass }}
              export REGION=eastus
              export RESOURCE_GROUP=openenv-{{ guid }}
              export PROJECT_NAME=ostoy-{{ guid }}
              export KEYVAULT_NAME=secret-store-{{ guid }}

#  azappid: "{{ azappsp.service_principals[0].app_id }}"
#  azpass: "{{ azpass }}"
#  azure_tenant: "{{ azure_tenant }}"
#  azure_subscription_id: "{{ azure_subscription_id }}"
#  aro_clientid: "{{ azaroappsp.service_principals[0].app_id }}"
#  az_aro_pass: "{{ az_aro_pass }}"
#  openenv_admin_upn: "{{ openenv_admin_upn }}"
#  generated_password: "{{ generated_password }}"

- name: Set GUID in bashrc
  hosts: bastions
  gather_facts: false
  become: true
  become_user: "{{ remote_user }}"
  tasks:
  - name: "Add GUID to /home/{{ remote_user }}.bashrc"
    lineinfile:
      path: "/home/{{ remote_user }}/.bashrc"
      regexp: "^export GUID"
      line: "export GUID={{ guid }}"

- name: Software flight-check
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tags:
    - post_flight_check
  tasks:
    - debug:
        msg: "Pre-Software checks completed successfully"
